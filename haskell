--
-- Copyright 2017 Warlock <internalmike@gmail.com>
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

import Prelude hiding ((!!), head, tail, init, last, minimum, fail) -- fail - confict with Control.Monad.Fail.fail
import Control.Applicative
#ifdef TESTS
import Control.Exception hiding (assert) -- assert - conflict with HUnit:Test.HUnit.Base
#else
import Control.Exception
#endif
import Control.Monad hiding (fail) -- fail - confict with Control.Monad.Fail.fail
import Control.Monad.Fail
import Control.Monad.Fix
import Control.Monad.Zip
import Data.Bits
import Data.Char
import Data.Data
import Data.Either hiding (isLeft, isRight) -- isLeft, isRight - use from errors:Control.Error.Util
import Data.Foldable
import Data.Functor.Classes
import Data.Functor.Identity
import Data.IORef
import Data.Int
import Data.List hiding ((!!), head, tail, init, last, minimum, transpose, uncons)
import Data.Maybe hiding (fromJust) -- fromJust - partial, use fromMaybe (error "err") at least
import Data.Proxy
import Data.Semigroup hiding (Option) -- Option - conflict with System.Console.GetOpt
import Data.String
import Data.Typeable
import Data.Version
import Data.Void
import Data.Word
import Debug.Trace
import Foreign.C.String
import Foreign.C.Types
import Foreign.Marshal hiding (void)
import Foreign.Marshal.Array
import Foreign.Marshal.Utils
import Foreign.Ptr
import Foreign.Storable
import GHC.Float
import GHC.Generics
import GHC.TypeLits
import Numeric
import System.Console.GetOpt
import System.Environment
import System.Exit
import System.IO
import System.IO.Error
import System.Posix.Types
import Text.ParserCombinators.ReadPrec hiding (lift, get)
import Text.Read hiding (lift, get)
import Text.Show

#ifdef MIN_VERSION_ConfigFile
import qualified Data.ConfigFile as CF
#endif

#ifdef MIN_VERSION_Euterpea
import qualified Euterpea as E
import qualified Euterpea.IO.MIDI.MidiIO as E
#endif

#ifdef MIN_VERSION_MissingH
import Data.String.Utils
#endif

#ifdef MIN_VERSION_PortMidi
import qualified Sound.PortMidi as E
#endif

#ifdef MIN_VERSION_app_settings
import qualified Data.AppSettings as A
#endif

#ifdef MIN_VERSION_attoparsec
import Data.Attoparsec.Text ((<?>))
import qualified Data.Attoparsec.Text as T (Parser)
import qualified Data.Attoparsec.Text as TP (parse, parseOnly, Result, IResult (..))
import qualified Data.Attoparsec.Text as Tp hiding (parse, parseOnly, Parser, Result, IResult, Done, Partial, Fail)
#endif

#ifdef MIN_VERSION_base64_bytestring
import Data.ByteString.Base64.Lazy
import qualified Data.ByteString.Base64 as S
#endif

#ifdef MIN_VERSION_binary
import qualified Data.Binary.Get as S
import qualified Data.Binary.Put as S
#endif

#ifdef MIN_VERSION_bytestring
import Data.ByteString.Lazy (ByteString)
import qualified Data.ByteString as S (ByteString)
import qualified Data.ByteString.Lazy as B hiding (ByteString, head, last, init, tail)
import qualified Data.ByteString as SB hiding (ByteString, head, last, init, tail)
import qualified Data.ByteString.Lazy.Char8 as C
import qualified Data.ByteString.Char8 as SC
import qualified Data.ByteString.Builder as BB
#endif

#ifdef MIN_VERSION_cairo
import Graphics.Rendering.Cairo hiding (x, y, width, height, Matrix, rotate)
import qualified Graphics.Rendering.Cairo as R (x, y, width, height, Matrix, rotate)
#endif

#ifdef MIN_VERSION_clock
import System.Clock
#endif

#ifdef MIN_VERSION_conduit
import Data.Conduit
import Data.Conduit.Lift
#endif

#ifdef MIN_VERSION_conduit_combinators
import qualified Data.Conduit.Combinators as N
#endif

#ifdef MIN_VERSION_conduit_extra
import qualified Data.Conduit.Binary as N
import qualified Data.Conduit.Text as N
#endif

#ifdef MIN_VERSION_containers
import Data.Map (Map)
import qualified Data.Map.Strict as S (Map)
import qualified Data.Map as M hiding ((!), Map)
import qualified Data.Map.Strict as SM hiding ((!), Map)
import Data.Sequence (Seq, (><))
import qualified Data.Sequence as S hiding (Seq, (<|), (|>), (><), viewl, viewr, ViewL, ViewR, (:>), (:<))
#endif

#ifdef MIN_VERSION_data_binary_ieee754
import Data.Binary.IEEE754 (floatToWord, wordToFloat, doubleToWord, wordToDouble)
import qualified Data.Binary.IEEE754 as S hiding (floatToWord, wordToFloat, doubleToWord, wordToDouble)
#endif

#ifdef MIN_VERSION_deepseq
import Control.DeepSeq
#endif

#ifdef MIN_VERSION_directory
import System.Directory
#endif

#ifdef MIN_VERSION_either
import Control.Monad.Trans.Either hiding (hoistEither)
import Data.Either.Combinators hiding (isLeft, isRight)
#endif

#ifdef MIN_VERSION_errors
import Control.Error.Util hiding (err, errLn)
#endif

#ifdef MIN_VERSION_exceptions
import qualified Control.Monad.Catch as E
#endif

#ifdef MIN_VERSION_gi_gdk
import GI.Gdk.Callbacks
import GI.Gdk.Constants
import GI.Gdk.Enums
import GI.Gdk.Flags
import GI.Gdk.Functions
import GI.Gdk.Interfaces
import qualified GI.Gdk.Objects as K
import GI.Gdk.Structs
import GI.Gdk.Unions
#endif

#ifdef MIN_VERSION_gi_glib
import GI.GLib hiding (get, set)
import qualified GI.Gtk as K (get, set)
#endif

#ifdef MIN_VERSION_gi_gtk
import GI.Gtk hiding (get, set, init, main)
import qualified GI.Gtk as K (init, main)
#endif

#ifdef MIN_VERSION_gtk3
import Graphics.UI.Gtk hiding (rectangle, get, set)
import qualified Graphics.UI.Gtk as K (rectangle, get, set)
#endif

#ifdef MIN_VERSION_hashable
import Data.Hashable
#endif

#ifdef MIN_VERSION_hashmap
import qualified Data.HashMap as H
#endif

#ifdef MIN_VERSION_iconv
import qualified Codec.Text.IConv as IC
#endif

#ifdef MIN_VERSION_linear
import Linear.Matrix ((!*!), (!+!), (!-!), (!*), (*!), (!!*), (*!!), (!!/), M22, M23, M24, M32, M33, M34, M42, M43, M44)
import qualified Linear.Matrix as L hiding ((!*!), (!+!), (!-!), (!*), (*!), (!!*), (*!!), (!!/), M22, M23, M24, M32, M33, M34, M42, M43, M44)
import qualified Linear.Metric as L
import Linear.Quaternion (Quaternion (..))
import qualified Linear.Quaternion as L hiding (Quaternion)
import Linear.V0 as L (V0 (..))
import qualified Linear.V0 as L hiding (V0)
import Linear.V1 as L (V1 (..), _x)
import qualified Linear.V1 as L hiding (V1, _x)
import Linear.V2 as L (V2 (..), _x, _y)
import qualified Linear.V2 as L hiding (V2, _x, _y)
import Linear.V3 as L (V3 (..), _x, _y, _z)
import qualified Linear.V3 as L hiding (V3, _x, _y, _z)
import Linear.V4 as L (V4 (..), _x, _y, _z, _w)
import qualified Linear.V4 as L hiding (V4, _x, _y, _z, _w)
import Linear.Vector ((*^), (^*), (^/), (^+^), (^-^))
import qualified Linear.Vector as L hiding ((*^), (^*), (^/), (^+^), (^-^))
#endif

#ifdef MIN_VERSION_lens
import Control.Lens
#endif

#ifdef MIN_VERSION_monad_control
import Control.Monad.Trans.Control
#endif

#ifdef MIN_VERSION_monad_loops
import Control.Monad.Loops
#endif

#ifdef MIN_VERSION_mono_traversable
import Data.MonoTraversable
#endif

#ifdef MIN_VERSION_mtl
import Control.Monad.Error.Class
#endif

#ifdef MIN_VERSION_ncurses
import UI.NCurses (Color (..), ColorID, Curses, Glyph (..), Attribute (..), glyphCornerUL, glyphCornerLL, glyphCornerUR, glyphCornerLR, glyphTeeL, glyphTeeR, glyphTeeB, glyphTeeT, glyphLineH, glyphLineV, glyphPlus, glyphScan1, glyphScan9, glyphDiamond, glyphStipple, glyphDegree, glyphPlusMinus, glyphBullet, glyphArrowL, glyphArrowR, glyphArrowD, glyphArrowU, glyphBoard, glyphLantern, glyphBlock, glyphS3, glyphS7, glyphNE, glyphLTE, glyphGTE, glyphPi, glyphSterling)
import qualified UI.NCurses as K hiding (Color (..), ColorID, Curses, Glyph (..), Attribute (..), glyphCornerUL, glyphCornerLL, glyphCornerUR, glyphCornerLR, glyphTeeL, glyphTeeR, glyphTeeB, glyphTeeT, glyphLineH, glyphLineV, glyphPlus, glyphScan1, glyphScan9, glyphDiamond, glyphStipple, glyphDegree, glyphPlusMinus, glyphBullet, glyphArrowL, glyphArrowR, glyphArrowD, glyphArrowU, glyphBoard, glyphLantern, glyphBlock, glyphS3, glyphS7, glyphNE, glyphLTE, glyphGTE, glyphPi, glyphSterling)
#endif

#ifdef MIN_VERSION_semigroups
import Data.Semigroup hiding (Option)
#endif

#ifdef MIN_VERSION_setlocale
import System.Locale.SetLocale
#endif

#ifdef MIN_VERSION_split
import Data.List.Split
#endif

#ifdef MIN_VERSION_text
import Data.Text.Lazy (Text)
import qualified Data.Text as S (Text)
import qualified Data.Text.Lazy as T hiding (Text, head, last, tail, init)
import qualified Data.Text.Lazy.IO as T
import qualified Data.Text as ST hiding (Text, head, last, tail, init)
import qualified Data.Text.Foreign as ST
import qualified Data.Text.Encoding as ST
import qualified Data.Text.IO as ST
import qualified Data.Text.Lazy.Encoding as T
#endif

#ifdef MIN_VERSION_time
import Data.Time.Calendar
import Data.Time.Clock
#endif

#ifdef MIN_VERSION_transformers
import Control.Monad.IO.Class
import Control.Monad.Trans.Class
import Control.Monad.Trans.Except
import Control.Monad.Trans.Maybe
import Control.Monad.Trans.Reader
import Control.Monad.Trans.State.Strict
import Control.Monad.Trans.Writer
#endif

#ifdef MIN_VERSION_transformers_base
import Control.Monad.Base
#endif

#ifdef MIN_VERSION_unix
import System.Posix.IO
#endif

#ifdef MIN_VERSION_utf8_string
import qualified Data.ByteString.Lazy.UTF8 as U
import qualified Data.ByteString.UTF8 as SU
#endif

#ifdef MIN_VERSION_utility_ht
import Data.List.HT hiding (replace)
#endif

#ifdef MIN_VERSION_vector
import Data.Vector (Vector, (!?), (//))
import qualified Data.Vector as V hiding ((!), head, last, init, tail, Vector, (!?), (//))
#endif

#ifdef MIN_VERSION_zlib
import qualified Codec.Compression.GZip as GZip
#endif

#ifdef TESTS
import Test.HUnit.Base hiding (Label)
import Test.HUnit.Text
#endif
