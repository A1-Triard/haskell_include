import Prelude hiding ((!!), head, tail, init, last, minimum)
import Control.Exception
import Control.Monad
import Data.Char
import Data.Either hiding (isLeft, isRight)
import Data.Int
import Data.List
import Data.Maybe hiding (fromJust)
import Data.Word
import Foreign.Marshal hiding (void)
import System.Environment
import System.Exit
import System.IO.Error
import System.Posix.Types

#ifdef MIN_VERSION_MissingH
import Data.String.Utils
#endif

#ifdef MIN_VERSION_vector
import Data.Vector (Vector, (!?))
import qualified Data.Vector as V hiding ((!), head, last, init, tail, Vector, (!?))
#endif

#ifdef MIN_VERSION_bytestring
import qualified Data.ByteString.Lazy as B
import qualified Data.ByteString.Lazy.Char8 as C
#endif

#ifdef MIN_VERSION_utf8_string
import qualified Data.ByteString.Lazy.UTF8 as U
#endif

#ifdef MIN_VERSION_base64_bytestring
import Data.ByteString.Base64.Lazy
#endif

#ifdef MIN_VERSION_monad_loops
import Control.Monad.Loops
#endif

#ifdef MIN_VERSION_transformers
import Control.Monad.IO.Class
import Control.Monad.Trans.Class
import Control.Monad.Trans.Except
#endif

#ifdef MIN_VERSION_either
import Control.Monad.Trans.Either hiding (hoistEither)
import Data.Either.Combinators hiding (isLeft, isRight)
#endif

#ifdef MIN_VERSION_errors
import Control.Error.Util
#endif

#ifdef MIN_VERSION_unix
import System.Posix.IO
#endif
