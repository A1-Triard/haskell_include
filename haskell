import Prelude hiding ((!!), head, tail, init, last, minimum)
import Control.Exception
import Control.Monad
import Control.Monad.Fix
import Data.Bits
import Data.Char
import Data.Either hiding (isLeft, isRight)
import Data.Int
import Data.List
import Data.Maybe hiding (fromJust)
import Data.Typeable
import Data.Version
import Data.Word
import Foreign.Marshal hiding (void)
import Foreign.Ptr
import Foreign.Storable
import System.Console.GetOpt
import System.Environment
import System.Exit
import System.IO
import System.IO.Error
import System.Posix.Types

#ifdef MIN_VERSION_MissingH
import Data.String.Utils
#endif

#ifdef MIN_VERSION_vector
import Data.Vector (Vector, (!?))
import qualified Data.Vector as V hiding ((!), head, last, init, tail, Vector, (!?))
#endif

#ifdef MIN_VERSION_containers
import Data.Map (Map)
import qualified Data.Map.Strict as S (Map)
import qualified Data.Map as M hiding ((!), Map)
import qualified Data.Map.Strict as SM hiding ((!), Map)
#endif

#ifdef MIN_VERSION_bytestring
import Data.ByteString.Lazy (ByteString)
import qualified Data.ByteString as S (ByteString)
import qualified Data.ByteString.Lazy as B hiding (ByteString, head, last, init, tail)
import qualified Data.ByteString as SB hiding (ByteString, head, last, init, tail)
import qualified Data.ByteString.Lazy.Char8 as C
import qualified Data.ByteString.Char8 as SC
#endif

#ifdef MIN_VERSION_utf8_string
import qualified Data.ByteString.Lazy.UTF8 as U
import qualified Data.ByteString.UTF8 as SU
#endif

#ifdef MIN_VERSION_base64_bytestring
import Data.ByteString.Base64.Lazy
import qualified Data.ByteString.Base64 as S
#endif

#ifdef MIN_VERSION_monad_loops
import Control.Monad.Loops
#endif

#ifdef MIN_VERSION_transformers
import Control.Monad.IO.Class
import Control.Monad.Trans.Class
import Control.Monad.Trans.Except
#endif

#ifdef MIN_VERSION_either
import Control.Monad.Trans.Either hiding (hoistEither)
import Data.Either.Combinators hiding (isLeft, isRight)
#endif

#ifdef MIN_VERSION_hashable
import Data.Hashable
#endif

#ifdef MIN_VERSION_hashmap
import qualified Data.HashMap as H
#endif

#ifdef MIN_VERSION_errors
import Control.Error.Util
#endif

#ifdef MIN_VERSION_unix
import System.Posix.IO
#endif

#ifdef MIN_VERSION_cairo
import Graphics.Rendering.Cairo hiding (x, y, width, height)
#endif

#ifdef MIN_VERSION_gtk3
import Graphics.UI.Gtk hiding (rectangle)
#endif

#ifdef TESTS
import Test.HUnit.Base
import Test.HUnit.Text
#endif
